// Code generated by counterfeiter. DO NOT EDIT.
package foodal

import (
	"context"
	"sync"

	"github.com/dfraglabs/go-microservice-1/dal/foo"
	"github.com/dfraglabs/go-microservice-1/dal/foo/types"
)

type FakeIDAL struct {
	GetBarStub        func(ctx context.Context, id int) (*types.Bar, error)
	getBarMutex       sync.RWMutex
	getBarArgsForCall []struct {
		ctx context.Context
		id  int
	}
	getBarReturns struct {
		result1 *types.Bar
		result2 error
	}
	getBarReturnsOnCall map[int]struct {
		result1 *types.Bar
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIDAL) GetBar(ctx context.Context, id int) (*types.Bar, error) {
	fake.getBarMutex.Lock()
	ret, specificReturn := fake.getBarReturnsOnCall[len(fake.getBarArgsForCall)]
	fake.getBarArgsForCall = append(fake.getBarArgsForCall, struct {
		ctx context.Context
		id  int
	}{ctx, id})
	fake.recordInvocation("GetBar", []interface{}{ctx, id})
	fake.getBarMutex.Unlock()
	if fake.GetBarStub != nil {
		return fake.GetBarStub(ctx, id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getBarReturns.result1, fake.getBarReturns.result2
}

func (fake *FakeIDAL) GetBarCallCount() int {
	fake.getBarMutex.RLock()
	defer fake.getBarMutex.RUnlock()
	return len(fake.getBarArgsForCall)
}

func (fake *FakeIDAL) GetBarArgsForCall(i int) (context.Context, int) {
	fake.getBarMutex.RLock()
	defer fake.getBarMutex.RUnlock()
	return fake.getBarArgsForCall[i].ctx, fake.getBarArgsForCall[i].id
}

func (fake *FakeIDAL) GetBarReturns(result1 *types.Bar, result2 error) {
	fake.GetBarStub = nil
	fake.getBarReturns = struct {
		result1 *types.Bar
		result2 error
	}{result1, result2}
}

func (fake *FakeIDAL) GetBarReturnsOnCall(i int, result1 *types.Bar, result2 error) {
	fake.GetBarStub = nil
	if fake.getBarReturnsOnCall == nil {
		fake.getBarReturnsOnCall = make(map[int]struct {
			result1 *types.Bar
			result2 error
		})
	}
	fake.getBarReturnsOnCall[i] = struct {
		result1 *types.Bar
		result2 error
	}{result1, result2}
}

func (fake *FakeIDAL) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBarMutex.RLock()
	defer fake.getBarMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIDAL) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ foo.IDAL = new(FakeIDAL)
